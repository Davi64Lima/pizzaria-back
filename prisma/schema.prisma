// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELED
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  email     String?  @unique
  phone     String   @unique
  address   Address?
  role      String   @default("costumer")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Address {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique @default(uuid())
  street     String
  number     String
  complement String?
  city       String
  state      String
  zipCode    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Product {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Flavor {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flavors")
}

model Order {
  id        Int         @id @default(autoincrement())
  uuid      String      @unique @default(uuid())
  status    OrderStatus @default(PENDING)
  total     Float
  cart      Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  @@map("orders")
}
